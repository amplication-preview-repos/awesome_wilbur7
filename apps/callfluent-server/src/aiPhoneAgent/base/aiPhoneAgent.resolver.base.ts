/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AiPhoneAgent } from "./AiPhoneAgent";
import { AiPhoneAgentCountArgs } from "./AiPhoneAgentCountArgs";
import { AiPhoneAgentFindManyArgs } from "./AiPhoneAgentFindManyArgs";
import { AiPhoneAgentFindUniqueArgs } from "./AiPhoneAgentFindUniqueArgs";
import { CreateAiPhoneAgentArgs } from "./CreateAiPhoneAgentArgs";
import { UpdateAiPhoneAgentArgs } from "./UpdateAiPhoneAgentArgs";
import { DeleteAiPhoneAgentArgs } from "./DeleteAiPhoneAgentArgs";
import { ConversationFindManyArgs } from "../../conversation/base/ConversationFindManyArgs";
import { Conversation } from "../../conversation/base/Conversation";
import { AiPhoneAgentService } from "../aiPhoneAgent.service";
@graphql.Resolver(() => AiPhoneAgent)
export class AiPhoneAgentResolverBase {
  constructor(protected readonly service: AiPhoneAgentService) {}

  async _aiPhoneAgentsMeta(
    @graphql.Args() args: AiPhoneAgentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AiPhoneAgent])
  async aiPhoneAgents(
    @graphql.Args() args: AiPhoneAgentFindManyArgs
  ): Promise<AiPhoneAgent[]> {
    return this.service.aiPhoneAgents(args);
  }

  @graphql.Query(() => AiPhoneAgent, { nullable: true })
  async aiPhoneAgent(
    @graphql.Args() args: AiPhoneAgentFindUniqueArgs
  ): Promise<AiPhoneAgent | null> {
    const result = await this.service.aiPhoneAgent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AiPhoneAgent)
  async createAiPhoneAgent(
    @graphql.Args() args: CreateAiPhoneAgentArgs
  ): Promise<AiPhoneAgent> {
    return await this.service.createAiPhoneAgent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AiPhoneAgent)
  async updateAiPhoneAgent(
    @graphql.Args() args: UpdateAiPhoneAgentArgs
  ): Promise<AiPhoneAgent | null> {
    try {
      return await this.service.updateAiPhoneAgent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AiPhoneAgent)
  async deleteAiPhoneAgent(
    @graphql.Args() args: DeleteAiPhoneAgentArgs
  ): Promise<AiPhoneAgent | null> {
    try {
      return await this.service.deleteAiPhoneAgent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Conversation], { name: "conversations" })
  async findConversations(
    @graphql.Parent() parent: AiPhoneAgent,
    @graphql.Args() args: ConversationFindManyArgs
  ): Promise<Conversation[]> {
    const results = await this.service.findConversations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
