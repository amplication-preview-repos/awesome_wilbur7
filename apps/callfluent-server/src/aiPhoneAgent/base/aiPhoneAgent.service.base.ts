/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AiPhoneAgent as PrismaAiPhoneAgent,
  Conversation as PrismaConversation,
} from "@prisma/client";

export class AiPhoneAgentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AiPhoneAgentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.aiPhoneAgent.count(args);
  }

  async aiPhoneAgents(
    args: Prisma.AiPhoneAgentFindManyArgs
  ): Promise<PrismaAiPhoneAgent[]> {
    return this.prisma.aiPhoneAgent.findMany(args);
  }
  async aiPhoneAgent(
    args: Prisma.AiPhoneAgentFindUniqueArgs
  ): Promise<PrismaAiPhoneAgent | null> {
    return this.prisma.aiPhoneAgent.findUnique(args);
  }
  async createAiPhoneAgent(
    args: Prisma.AiPhoneAgentCreateArgs
  ): Promise<PrismaAiPhoneAgent> {
    return this.prisma.aiPhoneAgent.create(args);
  }
  async updateAiPhoneAgent(
    args: Prisma.AiPhoneAgentUpdateArgs
  ): Promise<PrismaAiPhoneAgent> {
    return this.prisma.aiPhoneAgent.update(args);
  }
  async deleteAiPhoneAgent(
    args: Prisma.AiPhoneAgentDeleteArgs
  ): Promise<PrismaAiPhoneAgent> {
    return this.prisma.aiPhoneAgent.delete(args);
  }

  async findConversations(
    parentId: string,
    args: Prisma.ConversationFindManyArgs
  ): Promise<PrismaConversation[]> {
    return this.prisma.aiPhoneAgent
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .conversations(args);
  }
}
